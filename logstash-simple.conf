
input {
http_poller {
    urls => {

      get_data => {
        method => get
         url => "https://reiseauskunft.bahn.de/bin/stboard.exe/dn?rt=1&input=Stuttgart%20Hauptbahnhof&boardType=dep&L=vs_java3&productsFilter=111110111&start=yes&maxJourneys=20"

     }

    }
     codec => multiline
        {
            pattern => "<Journey"
            negate => true
            what => "previous"
            charset => "ISO-8859-1"
            auto_flush_interval => 1
        }

    request_timeout => 20
    schedule => { every => "60"}
    metadata_target => "http_poller_metadata"
  }
  
}
filter {
  mutate {
	remove_field => ["http_poller_metadata"]
  }

#Parsing NEW Message
 ruby {
   code => '
		event.set("newMessage","")
		event.set("newMessage", event.get("newMessage").insert(0,event.get("message")));
		event.set("newMessage", event.get("newMessage").insert(event.get("newMessage").length(),"</JourneyList>"))
		event.set("newMessage", event.get("newMessage").insert(0,"<JourneyList>"));
		'
    }

  xml {
    source => "newMessage"
    target => "parsed"
  }

  
   ruby {
        code => '
		require "date"
		require "time"
		
            event.get("[parsed][Journey]").each_index { |x|
                event.set("[parsed][Journey][#{x}][Abfahrtsdatum]", event.get("[parsed][Journey][#{x}][fpDate]"));
				event.set("[parsed][Journey][#{x}][Verspätung]", event.get("[parsed][Journey][#{x}][e_delay]"));
			    event.set("[parsed][Journey][#{x}][Ziel]", event.get("[parsed][Journey][#{x}][targetLoc]"));
                event.set("[parsed][Journey][#{x}][Linie]", event.get("[parsed][Journey][#{x}][prod]").split.join(""));
                event.set("[parsed][Journey][#{x}][FahrtNr]", event.get("[parsed][Journey][#{x}][administration]"));
                event.set("[parsed][Journey][#{x}][Verspätungsgrund]", event.get("[parsed][Journey][#{x}][delayReason]"));
                event.set("[parsed][Journey][#{x}][Abfahrtszeit]", event.get("[parsed][Journey][#{x}][fpTime]"));
                event.set("[parsed][Journey][#{x}][Fahrtrichtung]", event.get("[parsed][Journey][#{x}][dir]"));
				event.set("[parsed][Journey][#{x}][Platform]", event.get("[parsed][Journey][#{x}][platform]"));
				event.set("[parsed][Journey][#{x}][Linie]", event.get("[parsed][Journey][#{x}][Linie]").slice!(0,event.get("[parsed][Journey][#{x}][Linie]").index("#")));
				event.set("[parsed][Journey][#{x}][Fahrtrichtung]", event.get("[parsed][Journey][#{x}][Linie]")+" "+event.get("[parsed][Journey][#{x}][Ziel]"));
				
				
				if(event.get("[parsed][Journey][#{x}][Verspätung]").nil? or event.get("[parsed][Journey][#{x}][Verspätung]").empty? ) then
                event.set("[parsed][Journey][#{x}][Verspätung]", "0");
				end
				
					if(event.get("[parsed][Journey][#{x}][Platform]").nil? or event.get("[parsed][Journey][#{x}][Platform]").empty? ) then
                event.set("[parsed][Journey][#{x}][Platform]", "-");
				end
				
				if(event.get("[parsed][Journey][#{x}][Verspätungsgrund]").empty? or event.get("[parsed][Journey][#{x}][Verspätungsgrund]")== " ") then
                event.set("[parsed][Journey][#{x}][Verspätungsgrund]", "-");
				end
				
				if(event.get("[parsed][Journey][#{x}][Verspätungsgrund]").index(" ") == 0 )then
				   event.set("[parsed][Journey][#{x}][Verspätungsgrund]",  event.get("[parsed][Journey][#{x}][Verspätungsgrund]").slice!(1,event.get("[parsed][Journey][#{x}][Verspätungsgrund]").length));
				end
				
				if(event.get("[parsed][Journey][#{x}][administration]") != "vvsSTB" or event.get("[parsed][Journey][#{x}][administration]") != "800643") then
					event.set("[parsed][Journey][#{x}][Bahntyp]","Fernverkehr");
				end
				if(event.get("[parsed][Journey][#{x}][administration]") == "800643")then
				   event.set("[parsed][Journey][#{x}][Bahntyp]","S-Bahn");
				end
				if(event.get("[parsed][Journey][#{x}][administration]") == "vvsSTB")then
				   event.set("[parsed][Journey][#{x}][Bahntyp]","Straßenbahn");
				   event.set("[parsed][Journey][#{x}][Linie]",event.get("[parsed][Journey][#{x}][Linie]").slice!(3,event.get("[parsed][Journey][#{x}][Linie]").length));
				   event.set("[parsed][Journey][#{x}][Fahrtrichtung]",event.get("[parsed][Journey][#{x}][Fahrtrichtung]").slice!(3,event.get("[parsed][Journey][#{x}][Fahrtrichtung]").length));
				end
			
			
				event.set("[parsed][Journey][#{x}][Verspätung]", event.get("[parsed][Journey][#{x}][Verspätung]").to_i);
				event.set("[parsed][Journey][#{x}][Abfahrtsdatum]", event.get("[parsed][Journey][#{x}][Abfahrtsdatum]").insert(event.get("[parsed][Journey][#{x}][Abfahrtsdatum]").index("20"),"20"));
			
				require "time"
						
				event.set("[parsed][Journey][#{x}][Timestamp]" , event.get("[parsed][Journey][#{x}][Abfahrtsdatum]") +"T"+ event.get("[parsed][Journey][#{x}][Abfahrtszeit]")+":00.000Z")
                event.set("[parsed][Journey][#{x}][Timestamp]" , Time.parse(event.get("[parsed][Journey][#{x}][Timestamp]")))

				event.set("[parsed][Journey][#{x}][Abfahrtsdatum]" ,Time.parse(event.get("[parsed][Journey][#{x}][Abfahrtsdatum]")).strftime("%d-%m-%Y"))
				event.set("[parsed][Journey][#{x}][ID]" ,event.get("[parsed][Journey][#{x}][Timestamp]").to_s+"_"+ event.get("[parsed][Journey][#{x}][dirnr]"))

				event.set("[parsed][Journey][#{x}][Abfahrtstag]" ,Time.parse(event.get("[parsed][Journey][#{x}][Abfahrtsdatum]")).strftime("%A"))
				
				case event.get("[parsed][Journey][#{x}][Abfahrtstag]")
				when "Monday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Montag")
				when "Tuesday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Dienstag")
				when "Wednesday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Mittwoch")
				when "Thursday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Donnerstag")
				when "Friday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Freitag")
				when "Saturday"
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Samstag")
				else
				event.set("[parsed][Journey][#{x}][Abfahrtstag]","Sonntag")
				end

		
				
				event.remove("[parsed][Journey][#{x}][fpDate]");
				event.remove("[parsed][Journey][#{x}][administration]");
				event.remove("[parsed][Journey][#{x}][platform]");
                event.remove("[parsed][Journey][#{x}][targetLoc]");
                event.remove("[parsed][Journey][#{x}][prod]");
				event.remove("[parsed][Journey][#{x}][fpTime]");
				event.remove("[parsed][Journey][#{x}][delay]");
				event.remove("[parsed][Journey][#{x}][dir]");
				event.remove("[parsed][Journey][#{x}][e_delay]");
				event.remove("[parsed][Journey][#{x}][delayReason]");
				event.remove("[parsed][Journey][#{x}][depStation]");
	            event.remove("[parsed][Journey][#{x}][is_reachable]");
		        event.remove("[parsed][Journey][#{x}][approxDelay]");
				event.remove("[parsed][Journey][#{x}][newpl]")
				event.remove("[parsed][Journey][#{x}][HIMMessage]")
				event.remove("message");
				event.remove("newMessage");
				
            }	
		
						

        '
    }
	split { field => "[parsed][Journey]" }
}
  
output {
  elasticsearch {
   hosts => ["http://localhost:9200"]
    index           => "bahnlog-01_12_2019"
	document_id => "%{[parsed][Journey][ID]}"
    doc_as_upsert   => true
  }
    stdout { codec => rubydebug }
}

